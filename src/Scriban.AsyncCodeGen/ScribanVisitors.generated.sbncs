//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Scriban.Helpers;
using Scriban.Parsing;
using Scriban.Runtime;
using Scriban.Syntax;
using System.Numerics;

namespace Scriban.Syntax
{
    {{~ for node in nodes ~}}
#if SCRIBAN_PUBLIC
    public
#else
    internal
#endif
    partial class {{ node.Name }}
    {
        public override int ChildrenCount => {{ node.ScriptNodePropertyCount }};

        {{~ if node.ScriptNodePropertyCount == 0 ~}}
        protected override ScriptNode GetChildrenImpl(int index) => null;
        {{~ else if node.ScriptNodePropertyCount == 1 ~}}
        protected override ScriptNode GetChildrenImpl(int index) => {{ node.Properties[0].Name }};
        {{~ else ~}}
        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                {{~ for prop in node.Properties; if !prop.IsScriptNode; continue; end  ~}}
                {{for.index}} => {{prop.Name}},
                {{~ end ~}}
                _ => null
            };
        }

        {{~ end ~}}
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    {{~ end ~}}

#if SCRIBAN_PUBLIC
    public
#else
    internal
#endif
    abstract partial class ScriptRewriter
    {
    {{~ for node in nodes ~}}
        {{~ if !node.CanRewrite; continue; end ~}}
        public override ScriptNode Visit({{ node.Name }} node)
        {
            {{~ for prop in node.Properties ~}}
                {{- if !prop.IsScriptNode; continue -}}
                {{~ else if prop.IsList ~}}
            var new{{ prop.Name }} = VisitAll(node.{{ prop.Name }});
                {{~ else ~}}
            var new{{ prop.Name }} = ({{ prop.Type }})Visit((ScriptNode)node.{{ prop.Name }});
                {{~ end ~}}
            {{~ end ~}}
            return new {{ node.Name }}() { {{}}
                {{- for prop in node.Properties -}}
                {{ prop.Name }} = {{ (prop.IsScriptNode ? 'new' : 'node.') + prop.Name }}{{ for.last ? '':','}} {{ }}
                {{- end -}}
            };
        }

    {{~ end ~}}
    }

#if SCRIBAN_PUBLIC
    public
#else
    internal
#endif
    abstract partial class ScriptVisitor
    {
    {{~ for node in nodes ~}}
        public virtual void Visit({{ node.Name }} node) => DefaultVisit(node);
    {{~ end ~}}
    }

#if SCRIBAN_PUBLIC
    public
#else
    internal
#endif
    abstract partial class ScriptVisitor<TResult>
    {
    {{~ for node in nodes ~}}
        public virtual TResult Visit({{ node.Name }} node) => DefaultVisit(node);
    {{~ end ~}}
    }
}